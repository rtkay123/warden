permissions:
  contents: read
on:
  push:
    branches: [master]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: check
jobs:
  dockerfile:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        crate:
          - pseudonyms
          - warden
          - configuration
          - router
          - rule-executor
          - aggregator
    name: dockerfile / ${{ matrix.crate }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3
      - name: build # and push
        uses: docker/build-push-action@v6
        with:
          push: false
          context: .
          file: crates/${{ matrix.crate }}/Dockerfile
          tags: warden/${{ matrix.crate }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{ matrix.crate }}.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: warden-${{ matrix.crate }}
          path: /tmp/${{ matrix.crate }}.tar
  msrv:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        msrv: ["1.89.0"]
    name: msrv / ${{ matrix.msrv }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - name: Install ${{ matrix.msrv }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.msrv }}
      - name: install protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: cargo install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - name: cargo hack +${{ matrix.msrv }} 
        run: cargo hack --clean-per-run --feature-powerset check
  test:
    runs-on: ubuntu-latest
    needs: dockerfile
    name: test
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
      - name: start stack
        run: docker compose -f contrib/docker-compose/compose.yaml up -d
      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: download artifacts
        uses: actions/download-artifact@v5
        with:
          path: warden-images
          pattern: warden-*
          merge-multiple: true
      - name: load docker images
        run: |
          dir="warden-images"
          for file in "$dir"/*.tar; do
            if [ -f "$file" ]; then
              echo "Loading tar: $file"
              image_name=$(docker load --input "$file" | awk '/Loaded image:/ {print $3}')
              echo "Running image: $image_name"
              docker run --rm -d --network host "$image_name"
            fi
          done
          echo "images loaded"
          docker image ls -a
      - name: install bruno cli
        run: npm install -g @usebruno/cli
      - name: run api tests
        run: |
          cd contrib/bruno
          bru run configuration/health-check.bru \
            configuration/routing/02-post-routing.bru \
            configuration/rule/01-create.bru \
            configuration/typology/01-create.bru \
            --env warden --reporter-html results.html
      - name: upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: contrib/bruno/results.html
      - name: install stable
        uses: dtolnay/rust-toolchain@stable
      - name: install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      - uses: Swatinem/rust-cache@v2
      - name: install protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: cargo test --locked
        run:  cargo nextest run --locked --all-features --all-targets --workspace
      - name: tear down
        if: always()
        run: |
          docker compose -f contrib/docker-compose/compose.yaml down -v
          docker stop $(docker ps -aq) || true
          docker rm $(docker ps -aq) || true
